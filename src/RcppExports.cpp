// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// distance_cpp
arma::Cube<double> distance_cpp(List comb, DataFrame train, DataFrame test, int ncomb, double sigma);
RcppExport SEXP _shapr_distance_cpp(SEXP combSEXP, SEXP trainSEXP, SEXP testSEXP, SEXP ncombSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type comb(combSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type train(trainSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type test(testSEXP);
    Rcpp::traits::input_parameter< int >::type ncomb(ncombSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(distance_cpp(comb, train, test, ncomb, sigma));
    return rcpp_result_gen;
END_RCPP
}
// impute_cpp
arma::Mat<double> impute_cpp(arma::Cube<int> I, DataFrame train, DataFrame test, IntegerVector model_features, int comb);
RcppExport SEXP _shapr_impute_cpp(SEXP ISEXP, SEXP trainSEXP, SEXP testSEXP, SEXP model_featuresSEXP, SEXP combSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Cube<int> >::type I(ISEXP);
    Rcpp::traits::input_parameter< DataFrame >::type train(trainSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type test(testSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model_features(model_featuresSEXP);
    Rcpp::traits::input_parameter< int >::type comb(combSEXP);
    rcpp_result_gen = Rcpp::wrap(impute_cpp(I, train, test, model_features, comb));
    return rcpp_result_gen;
END_RCPP
}
// sample_cpp
arma::Cube<int> sample_cpp(arma::Cube<double> X, int nSamples, int ncomb);
RcppExport SEXP _shapr_sample_cpp(SEXP XSEXP, SEXP nSamplesSEXP, SEXP ncombSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Cube<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type nSamples(nSamplesSEXP);
    Rcpp::traits::input_parameter< int >::type ncomb(ncombSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_cpp(X, nSamples, ncomb));
    return rcpp_result_gen;
END_RCPP
}
// weighted_matrix
arma::Mat<double> weighted_matrix(List comb, NumericVector w, int m, int n);
RcppExport SEXP _shapr_weighted_matrix(SEXP combSEXP, SEXP wSEXP, SEXP mSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type comb(combSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_matrix(comb, w, m, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_shapr_distance_cpp", (DL_FUNC) &_shapr_distance_cpp, 5},
    {"_shapr_impute_cpp", (DL_FUNC) &_shapr_impute_cpp, 5},
    {"_shapr_sample_cpp", (DL_FUNC) &_shapr_sample_cpp, 3},
    {"_shapr_weighted_matrix", (DL_FUNC) &_shapr_weighted_matrix, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_shapr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
